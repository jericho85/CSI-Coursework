aPrior <- 1/aGrid
aPrior <- aPrior/sum(aPrior)
mGrid <-  seq(4,40,length=50)       # M
mPrior <- seq(0.02,0.02,length=50)
aMC <- sample(aGrid,1,prob=aPrior)
mMC <- sample(mGrid,1,prob=mPrior)
lam <- array(0, dim=c(numSim,nW))   # Allocate space for simulated CRIMES RATES --- Lambda
lam[1,] <- rgamma(nW,shape=aMC,scale=mMC/aMC)
for (k in 2:numSim) {
#alpha1 <- uMC[k-1]
# sample new lambdas from alpha and beta priors
lam[k,] <- rgamma(nW,shape=aMC,scale=mMC/aMC)
# from new lambdas get alpha likelihoods
aLik <- 1
for (j in 1:nW) {
aLik <- aLik * dgamma(lam[k-1,j],aMC[k-1]*aPrior,(mMC[k-1]*mPrior)/(aMC[k-1]*aPrior))
}
# find conditional for lambdas given A and B
# then find posterior and sample from it
aPost <- aPrior*aLik/sum(aPrior*aLik)
aMC[k] <- sample(aGrid,1,prob=aPost)
# from new lambdas get beta likelihoods
mLik <- 1
for (j in 1:nW) {
mLik <- mLik * dgamma(lam[k-1,j],aMC[k]*aPrior,(mMC[k-1]*mPrior)/(aMC[k]*aPrior))
}
# find conditional for lambdas given A and B
# then find posterior and sample from it
mPost <- mPrior*mLik/sum(mPrior*mLik)
mMC[k] <- sample(mGrid,1,prob=mPost)
}
View(lam)
View(lam)
View(lam)
View(lam)
nW <- 5
nC <- c(9,23,11,31,17)
numSim <- 10
aGrid <-  seq(1,50,length=50)       # Alpha
aPrior <- 1/aGrid
aPrior <- aPrior/sum(aPrior)
mGrid <-  seq(4,40,length=50)       # M
mPrior <- seq(0.02,0.02,length=50)
aMC <- sample(aGrid,1,prob=aPrior)
mMC <- sample(mGrid,1,prob=mPrior)
lam <- array(0, dim=c(numSim,nW))   # Allocate space for simulated CRIMES RATES --- Lambda
lam[1,] <- rgamma(nW,shape=aMC,scale=mMC/aMC)
for (k in 2:numSim) {
alpha1 = aMC[k-1] + (sum(nC))
beta1  = 1/(1/(mMC[k-1] / aMC[k-1]) + nW)
# sample new lambdas from alpha and beta priors
lam[k,] <- rgamma(nW,shape=alpha1,scale=beta1)
# from new lambdas get alpha likelihoods
aLik <- 1
for (j in 1:nW) {
aLik <- aLik * dgamma(lam[k-1,j],aMC[k-1]*aPrior,(mMC[k-1]*mPrior)/(aMC[k-1]*aPrior))
}
# find conditional for lambdas given A and B
# then find posterior and sample from it
aPost <- aPrior*aLik/sum(aPrior*aLik)
aMC[k] <- sample(aGrid,1,prob=aPost)
# from new lambdas get beta likelihoods
mLik <- 1
for (j in 1:nW) {
mLik <- mLik * dgamma(lam[k-1,j],aMC[k]*aPrior,(mMC[k-1]*mPrior)/(aMC[k]*aPrior))
}
# find conditional for lambdas given A and B
# then find posterior and sample from it
mPost <- mPrior*mLik/sum(mPrior*mLik)
mMC[k] <- sample(mGrid,1,prob=mPost)
}
View(lam)
View(lam)
numSim <- 1000
aGrid <-  seq(1,50,length=50)       # Alpha
aPrior <- 1/aGrid
aPrior <- aPrior/sum(aPrior)
mGrid <-  seq(4,40,length=50)       # M
mPrior <- seq(0.02,0.02,length=50)
aMC <- sample(aGrid,1,prob=aPrior)
mMC <- sample(mGrid,1,prob=mPrior)
lam <- array(0, dim=c(numSim,nW))   # Allocate space for simulated CRIMES RATES --- Lambda
lam[1,] <- rgamma(nW,shape=aMC,scale=mMC/aMC)
for (k in 2:numSim) {
alpha1 = aMC[k-1] + (sum(nC))
beta1  = 1/(1/(mMC[k-1] / aMC[k-1]) + nW)
# sample new lambdas from alpha and beta priors
lam[k,] <- rgamma(nW,shape=alpha1,scale=beta1)
# from new lambdas get alpha likelihoods
aLik <- 1
for (j in 1:nW) {
aLik <- aLik * dgamma(lam[k-1,j],aMC[k-1]*aPrior,(mMC[k-1]*mPrior)/(aMC[k-1]*aPrior))
}
# find conditional for lambdas given A and B
# then find posterior and sample from it
aPost <- aPrior*aLik/sum(aPrior*aLik)
aMC[k] <- sample(aGrid,1,prob=aPost)
# from new lambdas get beta likelihoods
mLik <- 1
for (j in 1:nW) {
mLik <- mLik * dgamma(lam[k-1,j],aMC[k]*aPrior,(mMC[k-1]*mPrior)/(aMC[k]*aPrior))
}
# find conditional for lambdas given A and B
# then find posterior and sample from it
mPost <- mPrior*mLik/sum(mPrior*mLik)
mMC[k] <- sample(mGrid,1,prob=mPost)
}
View(lam)
View(lam)
plot(lam[,1],type='.')
plot(lam[,1])
scatter(lam[,1])
scatter.smooth(lam[,1])
plot(lam[,1])
plot(lam[,1],type='.')
plot(lam[,1],type='-')
plot(lam[,1])
plot(lam[,2])
plot(lam[,2])
plot(lam[,3])
plot(lam[,4])
plot(lam[,5])
print(c(i,q))
quantile(c(0.025, 0.975, q[,1]))
quantile(c(0.025, 0.975), q[,1])
quantile(q[,1],c(0.025, 0.975))
for (i in 1:nW){
q <- quantile(q[,i],c(0.025, 0.975))
print(i)
print(q)
}
for (i in 1:nW){
q <- quantile(q[,i],c(0.025, 0.975))
print(i)
print(q)
}
print(c(q)
}
########################
# Problem 6: Attempt 3 #
########################
#############
# Problem 7 #
#############
cost_fp <- 0.05
cost_fn <- 1
p <- seq(0,1,length=101)
# Actual  Test  Action  Loss  Probability
# Ok      Ok    None    0     0.92*(1-P)
# Ok      Def   flag    0.05  0.08*(1-P)
# Def     Ok    None    1     0.12*P
# Def     Def   flag    0     0.88*P
follow_test <- p*0.12*1 + (1-p)*0.08*0.05
always_flag <- (1-p)*0.05
never_flag  <- p*1
plot(follow_test,type='l',col='blue',ylim=c(0,.1),xlim=c(0,50))
lines(always_flag,col='red')
lines(never_flag,col='green')
legend(30,.10,c("Follow Test","Always Flag",'Never Flag'),col=c("blue","red","green"),lty=c(1,1,1))
print(follow_test)
print(never_flag)
print(always_flag)
for (i in seq(1,100,length=100)) {
print(c(i,follow_test[i],always_flag[i]))
}
#############
# Problem 8 #
#############
library(data.table)
data8 <- fread('https://www2.stat.duke.edu/courses/Spring03/sta113/Data/Hand/icecream.dat')
head(data8)
y <- data8$V2 # Consumption
x <- data8$V5 # Temperature F
x <- x[-length(x)]
y <- y[-length(y)]
n = length(x)
xbar <- mean(x)
ybar <- mean(y)
b <- sum( (x-xbar) * (y-ybar)) / sum( (x-xbar)^2 )
a <- ybar - b*xbar
sxx <- sum( (x-xbar)^2 )
syy <- sum( (y-ybar)^2 )
sxy <- sum( (x-xbar) * (y-ybar) )
see <- sum( (y-ybar-b*(x-xbar))^2)
#posteriors
rho_alpha <- (n-2)/2
rho_beta  <- 2/see
eta_center <- ybar
eta_spread <- (n*(n-2)/see)^-0.5
eta_degf   <- n-2
beta_center <- b
beta_spread <- (see*(n-2)/see)^-0.5
beta_degf   <- n-2
s2<- see/(n-2)
s <- sqrt(s2)
print(mean(y))
print(mean(x))
fit=lm(y ~ x)
summary(fit)  # Summary of regression results
plot(fit)     # Diagnostic plots from lm object
temps <- seq(20,80,length=61)
min_vals <- sort(temps*0.002170733 + 0.1584506)
max_vals <- sort(temps*0.004044067 + 0.2552736)
plot(x,y,ylim=c(0.1,0.6))
lines(temps,min_vals)
lines(temps,max_vals)
print(max_vals)
#############
# Problem 9 #
#############
# Posterior predictive distribution for temps
xlow = 46
xhigh = 98
predlow.center = a + b*xlow
predlow.spread = sqrt(((xhigh-xbar)^2/sxx + 1/n + 1)*see/(n-2))
predlow.df = n-2
predhigh.center = a + b*xhigh
predhigh.spread = sqrt(((xhigh-xbar)^2/sxx + 1/n + 1)*see/(n-2))
predhigh.df = n-2
# Exact credible interval for prediction @ 19 mg
predlow.center + qt(c(0.05,0.95),predlow.df)*predlow.spread
predhigh.center + qt(c(0.05,0.95),predhigh.df)*predhigh.spread
##############
# Problem 10 #
##############
# Beta binomial?
# Priors
beta_e <- c(1,1)
beta_d <- c(1,1)
beta_u <- c(1,1)
# Posteriors
beta_e <- c(10,22)
beta_d <- c(16,16)
beta_u <- c(7,25)
e_ci <- qbeta(c(0.05,0.95),shape1=beta_e[1],shape2=beta_e[2])
d_ci <- qbeta(c(0.05,0.95),shape1=beta_d[1],shape2=beta_d[2])
u_ci <- qbeta(c(0.05,0.95),shape1=beta_u[1],shape2=beta_u[2])
e_ci
d_ci
u_ci
e_ci <- qbeta(c(.5),shape1=beta_e[1],shape2=beta_e[2])
d_ci <- qbeta(c(.5),shape1=beta_d[1],shape2=beta_d[2])
u_ci <- qbeta(c(.5),shape1=beta_u[1],shape2=beta_u[2])
v <- c(e_ci,d_ci,u_ci)
v <- v/sum(v)
print(v)
#
l_h <- 8
c_p <- 170.1-7.5 + l_h
c_t <- 190
ex <- seq(1,100,length=100)
t_p <- ex + c_p
f_g <- t_p / (c_t+100)
for (i in 1:100){
print(c(ex[i],f_g[i]))
}
print(c(q))
for (i in 1:nW){
q <- quantile(q[,i],c(0.025, 0.975))
print(i)
print(c(q))
}
print(c(q[1],q[2]))
print(c(q[1],q[2]))
for (i in 1:nW){
q <- quantile(q[,i],c(0.025, 0.975))
print(i)
print(c(q[1],q[2]))
}
for (i in 1:nW){
q <- quantile(q[,i],c(0.025, 0.975))
print(i)
print(c(q[1],q[2]))
}
quantile(q[,1],c(0.025, 0.975))
quantile(lam[,1],c(0.025, 0.975))
quantile(lam[,2],c(0.025, 0.975))
quantile(lam[,3],c(0.025, 0.975))
quantile(lam[,4],c(0.025, 0.975))
quantile(lam[,5],c(0.025, 0.975))
nW <- 5
nC <- c(9,23,11,31,17)
numSim <- 1000
aGrid <-  seq(1,50,length=50)       # Alpha
aPrior <- 1/aGrid
aPrior <- aPrior/sum(aPrior)
mGrid <-  seq(4,40,length=50)       # M
mPrior <- seq(0.02,0.02,length=50)
aMC <- sample(aGrid,1,prob=aPrior)
mMC <- sample(mGrid,1,prob=mPrior)
lam <- array(0, dim=c(numSim,nW))   # Allocate space for simulated CRIMES RATES --- Lambda
lam[1,] <- rgamma(nW,shape=aMC,scale=mMC/aMC)
for (k in 2:numSim) {
# This doesn't seem to work right; getting roughly the same lambdas at the end.
# Trying instead to sample from posteriors given data individually by Lambda
#alpha1 = aMC[k-1] + (sum(nC))
#beta1  = 1/(1/(mMC[k-1] / aMC[k-1]) + nW)
# sample new lambdas from alpha and beta priors
#lam[k,] <- rgamma(nW,shape=alpha1,scale=beta1)
# Sample new lambdas from individually updated gamma distributions
for (j in 1:nW){
alpha1 <- aMC[k-1] + nC[j]
beta1  <- 1/(1/(mMC[k-1] / aMC[k-1]) + 1)
lam[k,j] <- rgamma(1,shape=alpha1,scale=beta1)
}
# from new lambdas get alpha likelihoods
aLik <- 1
for (j in 1:nW) {
aLik <- aLik * dgamma(lam[k-1,j],aMC[k-1]*aPrior,(mMC[k-1]*mPrior)/(aMC[k-1]*aPrior))
}
# find conditional for lambdas given A and B
# then find posterior and sample from it
aPost <- aPrior*aLik/sum(aPrior*aLik)
aMC[k] <- sample(aGrid,1,prob=aPost)
# from new lambdas get beta likelihoods
mLik <- 1
for (j in 1:nW) {
mLik <- mLik * dgamma(lam[k-1,j],aMC[k]*aPrior,(mMC[k-1]*mPrior)/(aMC[k]*aPrior))
}
# find conditional for lambdas given A and B
# then find posterior and sample from it
mPost <- mPrior*mLik/sum(mPrior*mLik)
mMC[k] <- sample(mGrid,1,prob=mPost)
}
quantile(lam[,1],c(0.025, 0.975))
quantile(lam[,2],c(0.025, 0.975))
quantile(lam[,3],c(0.025, 0.975))
quantile(lam[,4],c(0.025, 0.975))
quantile(lam[,5],c(0.025, 0.975))
numSim <- 10000
aGrid <-  seq(1,50,length=50)       # Alpha
aPrior <- 1/aGrid
aPrior <- aPrior/sum(aPrior)
mGrid <-  seq(4,40,length=50)       # M
mPrior <- seq(0.02,0.02,length=50)
aMC <- sample(aGrid,1,prob=aPrior)
mMC <- sample(mGrid,1,prob=mPrior)
lam <- array(0, dim=c(numSim,nW))   # Allocate space for simulated CRIMES RATES --- Lambda
lam[1,] <- rgamma(nW,shape=aMC,scale=mMC/aMC)
for (k in 2:numSim) {
# This doesn't seem to work right; getting roughly the same lambdas at the end.
# Trying instead to sample from posteriors given data individually by Lambda
#alpha1 = aMC[k-1] + (sum(nC))
#beta1  = 1/(1/(mMC[k-1] / aMC[k-1]) + nW)
# sample new lambdas from alpha and beta priors
#lam[k,] <- rgamma(nW,shape=alpha1,scale=beta1)
# Sample new lambdas from individually updated gamma distributions
for (j in 1:nW){
alpha1 <- aMC[k-1] + nC[j]
beta1  <- 1/(1/(mMC[k-1] / aMC[k-1]) + 1)
lam[k,j] <- rgamma(1,shape=alpha1,scale=beta1)
}
# from new lambdas get alpha likelihoods
aLik <- 1
for (j in 1:nW) {
aLik <- aLik * dgamma(lam[k-1,j],aMC[k-1]*aPrior,(mMC[k-1]*mPrior)/(aMC[k-1]*aPrior))
}
# find conditional for lambdas given A and B
# then find posterior and sample from it
aPost <- aPrior*aLik/sum(aPrior*aLik)
aMC[k] <- sample(aGrid,1,prob=aPost)
# from new lambdas get beta likelihoods
mLik <- 1
for (j in 1:nW) {
mLik <- mLik * dgamma(lam[k-1,j],aMC[k]*aPrior,(mMC[k-1]*mPrior)/(aMC[k]*aPrior))
}
# find conditional for lambdas given A and B
# then find posterior and sample from it
mPost <- mPrior*mLik/sum(mPrior*mLik)
mMC[k] <- sample(mGrid,1,prob=mPost)
}
quantile(lam[,1],c(0.025, 0.975))
quantile(lam[,2],c(0.025, 0.975))
quantile(lam[,3],c(0.025, 0.975))
quantile(lam[,4],c(0.025, 0.975))
quantile(lam[,5],c(0.025, 0.975))
density(lam[,1])
plot(density(lam[,1]))
plot(density(lam[,1]))
lines(density(lam[,2]))
lines(density(lam[,3]))
lines(density(lam[,4]))
lines(density(lam[,5]))
plot(density(lam[,1]),col='dark blue')
plot(density(lam[,1]),col='dark blue',xlim=c(0,50))
lines(density(lam[,2]))
lines(density(lam[,3]))
lines(density(lam[,4]))
lines(density(lam[,5]))
plot(density(lam[,1]),col='dark blue',xlim=c(0,40))
lines(density(lam[,2]),col='blue')
lines(density(lam[,3]),col='light blue')
lines(density(lam[,3]),col='dark green')
lines(density(lam[,2]),col='purple')
lines(density(lam[,4]),col='orange')
lines(density(lam[,4]),col='dark orange')
lines(density(lam[,5]),col='dark red')
legend(30,0.15,c("Ward 1",'Ward 2','Ward 3','Ward 4','Ward 5'),
col=c('dard blue','purple','dark green','dark orange','dark red'),lty=c(1,1,1))
legend(30,0.15,c("Ward 1",'Ward 2','Ward 3','Ward 4','Ward 5'),
col=c('dard blue','purple','dark green','dark orange','dark red'),lty=c(1,1,1,1,1))
legend(30,0.15,c("Ward 1",'Ward 2','Ward 3','Ward 4','Ward 5'),
col=c('dard blue','purple','dark green','dark orange','dark red'),lty=c(1,1,1,1,1))
legend(30,0.15,c("Ward 1",'Ward 2','Ward 3','Ward 4','Ward 5'),
col=c('dard blue','purple','dark green','dark orange','dark red'),lty=c(1,1,1,1,1))
legend(30,0.15,c("Ward 1",'Ward 2','Ward 3','Ward 4','Ward 5'),
col=c('dark blue','purple','dark green','dark orange','dark red'),lty=c(1,1,1,1,1))
l
l
l
l
l
plot(density(lam[,1]),col='dark blue',xlim=c(0,40))
lines(density(lam[,2]),col='purple')
lines(density(lam[,3]),col='dark green')
lines(density(lam[,4]),col='dark orange')
lines(density(lam[,5]),col='dark red')
legend(30,0.15,c("Ward 1",'Ward 2','Ward 3','Ward 4','Ward 5'),
col=c('dark blue','purple','dark green','dark orange','dark red'),lty=c(1,1,1,1,1))
plot(density(lam[,1]),col='dark blue',xlim=c(0,45))
lines(density(lam[,2]),col='purple')
lines(density(lam[,3]),col='dark green')
lines(density(lam[,4]),col='dark orange')
lines(density(lam[,5]),col='dark red')
legend(30,0.15,c("Ward 1",'Ward 2','Ward 3','Ward 4','Ward 5'),
col=c('dark blue','purple','dark green','dark orange','dark red'),lty=c(1,1,1,1,1))
legend(35,0.15,c("Ward 1",'Ward 2','Ward 3','Ward 4','Ward 5'),
col=c('dark blue','purple','dark green','dark orange','dark red'),lty=c(1,1,1,1,1))
plot(density(lam[,1]),col='dark blue',xlim=c(0,45))
lines(density(lam[,2]),col='purple')
lines(density(lam[,3]),col='dark green')
lines(density(lam[,4]),col='dark orange')
lines(density(lam[,5]),col='dark red')
legend(35,0.15,c("Ward 1",'Ward 2','Ward 3','Ward 4','Ward 5'),
col=c('dark blue','purple','dark green','dark orange','dark red'),lty=c(1,1,1,1,1))
plot(density(lam[,1]),col='dark blue',xlim=c(0,45),main='Density of Lambda by Ward',ylab='Density','xlab'='Lambda')
lines(density(lam[,2]),col='purple')
lines(density(lam[,3]),col='dark green')
lines(density(lam[,4]),col='dark orange')
lines(density(lam[,5]),col='dark red')
legend(35,0.15,c("Ward 1",'Ward 2','Ward 3','Ward 4','Ward 5'),
col=c('dark blue','purple','dark green','dark orange','dark red'),lty=c(1,1,1,1,1))
plot(density(lam[,1]),col='dark blue',xlim=c(0,45),main='Density of Lambda by Ward',ylab='Density','xlab'='Lambda')
lines(density(lam[,2]),col='purple')
lines(density(lam[,3]),col='dark green')
lines(density(lam[,4]),col='dark orange')
lines(density(lam[,5]),col='dark red')
legend(35,0.15,c("Ward 1",'Ward 2','Ward 3','Ward 4','Ward 5'),
col=c('dark blue','purple','dark green','dark orange','dark red'),lty=c(1,1,1,1,1))
legend(32,0.15,c("Ward 1",'Ward 2','Ward 3','Ward 4','Ward 5'),
col=c('dark blue','purple','dark green','dark orange','dark red'),lty=c(1,1,1,1,1))
plot(density(lam[,1]),col='dark blue',xlim=c(0,45),main='Density of Lambda by Ward',ylab='Density','xlab'='Lambda')
lines(density(lam[,2]),col='purple')
lines(density(lam[,3]),col='dark green')
lines(density(lam[,4]),col='dark orange')
lines(density(lam[,5]),col='dark red')
legend(32,0.15,c("Ward 1",'Ward 2','Ward 3','Ward 4','Ward 5'),
col=c('dark blue','purple','dark green','dark orange','dark red'),lty=c(1,1,1,1,1))
numSim <- 100000
aGrid <-  seq(1,50,length=50)       # Alpha
aPrior <- 1/aGrid
aPrior <- aPrior/sum(aPrior)
mGrid <-  seq(4,40,length=50)       # M
mPrior <- seq(0.02,0.02,length=50)
aMC <- sample(aGrid,1,prob=aPrior)
mMC <- sample(mGrid,1,prob=mPrior)
lam <- array(0, dim=c(numSim,nW))   # Allocate space for simulated CRIMES RATES --- Lambda
lam[1,] <- rgamma(nW,shape=aMC,scale=mMC/aMC)
for (k in 2:numSim) {
# This doesn't seem to work right; getting roughly the same lambdas at the end.
# Trying instead to sample from posteriors given data individually by Lambda
#alpha1 = aMC[k-1] + (sum(nC))
#beta1  = 1/(1/(mMC[k-1] / aMC[k-1]) + nW)
# sample new lambdas from alpha and beta priors
#lam[k,] <- rgamma(nW,shape=alpha1,scale=beta1)
# Sample new lambdas from individually updated gamma distributions
for (j in 1:nW){
alpha1 <- aMC[k-1] + nC[j]
beta1  <- 1/(1/(mMC[k-1] / aMC[k-1]) + 1)
lam[k,j] <- rgamma(1,shape=alpha1,scale=beta1)
}
# from new lambdas get alpha likelihoods
aLik <- 1
for (j in 1:nW) {
aLik <- aLik * dgamma(lam[k-1,j],aMC[k-1]*aPrior,(mMC[k-1]*mPrior)/(aMC[k-1]*aPrior))
}
# find conditional for lambdas given A and B
# then find posterior and sample from it
aPost <- aPrior*aLik/sum(aPrior*aLik)
aMC[k] <- sample(aGrid,1,prob=aPost)
# from new lambdas get beta likelihoods
mLik <- 1
for (j in 1:nW) {
mLik <- mLik * dgamma(lam[k-1,j],aMC[k]*aPrior,(mMC[k-1]*mPrior)/(aMC[k]*aPrior))
}
# find conditional for lambdas given A and B
# then find posterior and sample from it
mPost <- mPrior*mLik/sum(mPrior*mLik)
mMC[k] <- sample(mGrid,1,prob=mPost)
}
quantile(lam[,1],c(0.025, 0.975))
quantile(lam[,2],c(0.025, 0.975))
quantile(lam[,3],c(0.025, 0.975))
quantile(lam[,4],c(0.025, 0.975))
quantile(lam[,5],c(0.025, 0.975))
plot(density(lam[,1]),col='dark blue',xlim=c(0,45),main='Density of Lambda by Ward',ylab='Density','xlab'='Lambda')
lines(density(lam[,2]),col='purple')
lines(density(lam[,3]),col='dark green')
lines(density(lam[,4]),col='dark orange')
lines(density(lam[,5]),col='dark red')
legend(32,0.15,c("Ward 1",'Ward 2','Ward 3','Ward 4','Ward 5'),
col=c('dark blue','purple','dark green','dark orange','dark red'),lty=c(1,1,1,1,1))
