rhoGibbs[k]<-rgamma(1,shape=alphaG,scale=betaG)
sigmaGibbs[k]<-1/sqrt(rhoGibbs[k])
}
#Plot theoretical and Monte Carlo density functions
plot(density(thetaDirect),col="darkgreen",lty=2,main="",xlab="Theta")
densityGibbs<-density(thetaGibbs)
lines(densityGibbs$x,densityGibbs$y,col="blue",lty=3)
lines(thetaVals,thetaMargDens,col="red")
legend(5.76,15,c("Direct MC KD","Gibbs KD","Theoretical t"),col=c("darkgreen","blue","red"),lty=c(2,3,1))
#Set simulation sample size
numSim <- 10000
# Simulate directly from the posterior distribution
rhoDirect <- rgamma(numSim,shape=alpha1,scale=beta1)
sigmaDirect <- 1/sqrt(rhoDirect)
thetaDirect <- rnorm(numSim,mean=mu1,sd=sigmaDirect/sqrt(k1))
####
# Now use Gibbs sampling for semi-conjugate distribution
thetaGibbs<-xbar     #Initial guess for mean
sigmaGibbs<-sd(x)    #Initial guess for stdev
rhoGibbs<-1/sigmaGibbs[1]^2  # Initial guess for precision
for (k in 4:numSim) {
thetaGibbs[k]<-  # note posterior mean is mu1 because k is zero
rnorm(1,mean=mu1,sd=sigmaGibbs[k-1]/sqrt(k1))
alphaG<-alpha1    # This is unncecessary because alpha1 does not change
betaG<-1/(0.5*sum((x-thetaGibbs[k])^2))
rhoGibbs[k]<-rgamma(1,shape=alphaG,scale=betaG)
sigmaGibbs[k]<-1/sqrt(rhoGibbs[k])
}
#Plot theoretical and Monte Carlo density functions
plot(density(thetaDirect),col="darkgreen",lty=2,main="",xlab="Theta")
densityGibbs<-density(thetaGibbs)
lines(densityGibbs$x,densityGibbs$y,col="blue",lty=3)
lines(thetaVals,thetaMargDens,col="red")
legend(5.76,15,c("Direct MC KD","Gibbs KD","Theoretical t"),col=c("darkgreen","blue","red"),lty=c(2,3,1))
#Set simulation sample size
numSim <- 10000
# Simulate directly from the posterior distribution
rhoDirect <- rgamma(numSim,shape=alpha1,scale=beta1)
sigmaDirect <- 1/sqrt(rhoDirect)
thetaDirect <- rnorm(numSim,mean=mu1,sd=sigmaDirect/sqrt(k1))
####
# Now use Gibbs sampling for semi-conjugate distribution
thetaGibbs<-xbar     #Initial guess for mean
sigmaGibbs<-sd(x)    #Initial guess for stdev
rhoGibbs<-1/sigmaGibbs[1]^2  # Initial guess for precision
for (k in 4:numSim) {
thetaGibbs[k]<-  # note posterior mean is mu1 because k is zero
rnorm(1,mean=mu1,sd=sigmaGibbs[k-1]/sqrt(k1))
alphaG<-alpha1    # This is unncecessary because alpha1 does not change
betaG<-1/(0.5*sum((x-thetaGibbs[k])^2))
rhoGibbs[k]<-rgamma(1,shape=alphaG,scale=betaG)
sigmaGibbs[k]<-1/sqrt(rhoGibbs[k])
}
#Plot theoretical and Monte Carlo density functions
plot(density(thetaDirect),col="darkgreen",lty=2,main="",xlab="Theta")
densityGibbs<-density(thetaGibbs)
lines(densityGibbs$x,densityGibbs$y,col="blue",lty=3)
lines(thetaVals,thetaMargDens,col="red")
legend(5.76,15,c("Direct MC KD","Gibbs KD","Theoretical t"),col=c("darkgreen","blue","red"),lty=c(2,3,1))
thetaGibbs<-xbar     #Initial guess for mean
sigmaGibbs<-sd(x)    #Initial guess for stdev
rhoGibbs<-1/sigmaGibbs[1]^2  # Initial guess for precision
for (k in 2:numSim) {
thetaGibbs[k]<-  # note posterior mean is mu1 because k is zero
rnorm(1,mean=mu1,sd=sigmaGibbs[k-1]/sqrt(k1))
alphaG<-alpha1    # This is unncecessary because alpha1 does not change
betaG<-1/(0.5*sum((x-thetaGibbs[k])^2))
rhoGibbs[k]<-rgamma(1,shape=alphaG,scale=betaG)
sigmaGibbs[k]<-1/sqrt(rhoGibbs[k])
}
#Plot theoretical and Monte Carlo density functions
plot(density(thetaDirect),col="darkgreen",lty=2,main="",xlab="Theta")
densityGibbs<-density(thetaGibbs)
lines(densityGibbs$x,densityGibbs$y,col="blue",lty=3)
lines(thetaVals,thetaMargDens,col="red")
legend(5.76,15,c("Direct MC KD","Gibbs KD","Theoretical t"),col=c("darkgreen","blue","red"),lty=c(2,3,1))
thetaGibbs<-xbar     #Initial guess for mean
sigmaGibbs<-sd(x)    #Initial guess for stdev
rhoGibbs<-1/sigmaGibbs[1]^2  # Initial guess for precision
for (k in 2:numSim) {
thetaGibbs[k]<-  # note posterior mean is mu1 because k is zero
rnorm(1,mean=mu1,sd=sigmaGibbs[k-1]/sqrt(k1))
alphaG<-alpha1    # This is unncecessary because alpha1 does not change
betaG<-1/(0.5*sum((x-thetaGibbs[k])^2))
rhoGibbs[k]<-rgamma(1,shape=alphaG,scale=betaG)
sigmaGibbs[k]<-1/sqrt(rhoGibbs[k])
}
#Plot theoretical and Monte Carlo density functions
plot(density(thetaDirect),col="darkgreen",lty=2,main="",xlab="Theta")
densityGibbs<-density(thetaGibbs)
lines(densityGibbs$x,densityGibbs$y,col="blue",lty=3)
lines(thetaVals,thetaMargDens,col="red")
legend(5.76,15,c("Direct MC KD","Gibbs KD","Theoretical t"),col=c("darkgreen","blue","red"),lty=c(2,3,1))
thetaGibbs<-xbar     #Initial guess for mean
sigmaGibbs<-sd(x)    #Initial guess for stdev
rhoGibbs<-1/sigmaGibbs[1]^2  # Initial guess for precision
for (k in 2:numSim) {
thetaGibbs[k]<-  # note posterior mean is mu1 because k is zero
rnorm(1,mean=mu1,sd=sigmaGibbs[k-1]/sqrt(k1))
alphaG<-alpha1    # This is unncecessary because alpha1 does not change
betaG<-1/(0.5*sum((x-thetaGibbs[k])^2))
rhoGibbs[k]<-rgamma(1,shape=alphaG,scale=betaG)
sigmaGibbs[k]<-1/sqrt(rhoGibbs[k])
}
#Plot theoretical and Monte Carlo density functions
plot(density(thetaDirect),col="darkgreen",lty=2,main="",xlab="Theta")
densityGibbs<-density(thetaGibbs)
lines(densityGibbs$x,densityGibbs$y,col="blue",lty=3)
lines(thetaVals,thetaMargDens,col="red")
legend(5.76,15,c("Direct MC KD","Gibbs KD","Theoretical t"),col=c("darkgreen","blue","red"),lty=c(2,3,1))
thetaGibbs<-xbar     #Initial guess for mean
sigmaGibbs<-sd(x)    #Initial guess for stdev
rhoGibbs<-1/sigmaGibbs[1]^2  # Initial guess for precision
for (k in 2:numSim) {
thetaGibbs[k]<-  # note posterior mean is mu1 because k is zero
rnorm(1,mean=mu1,sd=sigmaGibbs[k-1]/sqrt(k1))
alphaG<-alpha1    # This is unncecessary because alpha1 does not change
betaG<-1/(0.5*sum((x-thetaGibbs[k])^2))
rhoGibbs[k]<-rgamma(1,shape=alphaG,scale=betaG)
sigmaGibbs[k]<-1/sqrt(rhoGibbs[k])
}
#Plot theoretical and Monte Carlo density functions
plot(density(thetaDirect),col="darkgreen",lty=2,main="",xlab="Theta")
densityGibbs<-density(thetaGibbs)
lines(densityGibbs$x,densityGibbs$y,col="blue",lty=3)
lines(thetaVals,thetaMargDens,col="red")
legend(5.76,15,c("Direct MC KD","Gibbs KD","Theoretical t"),col=c("darkgreen","blue","red"),lty=c(2,3,1))
#Plot theoretical and Monte Carlo density functions
plot(density(sigmaDirect),col="darkgreen",lty=2,main="",xlab="Theta")
densityGibbsS<-density(sigmaGibbs)
lines(densityGibbsS$x,densityGibbsS$y,col="blue",lty=3)
legend(5.76,15,c("Direct MC KD","Gibbs KD"),col=c("darkgreen","blue"),lty=c(2,3))
#Plot theoretical and Monte Carlo density functions
plot(density(sigmaDirect),col="darkgreen",lty=2,main="",xlab="Sigma")
densityGibbsS<-density(sigmaGibbs)
lines(densityGibbsS$x,densityGibbsS$y,col="blue",lty=3)
legend(5.76,15,c("Direct MC KD","Gibbs KD"),col=c("darkgreen","blue"),lty=c(2,3))
setwd("~/Documents/Courses/SYST 664/R Files/Examples_Spring_18/Unit 6/Reaction Time Example")
require(R2jags)    # running JAGS from r
require(superdiag) # mcmc diagnostics
require(coda)
require(lattice)   # for some of the plots
set.seed(12345)  # set seed for reproducibility
# The data
reaction.times=c(5.743, 5.606, 5.858, 5.656, 5.591, 5.793, 5.697, 5.875, 5.677, 5.73, 5.69, 5.919, 5.981, 5.996, 5.635, 5.799, 5.537, 5.642, 5.858, 5.793, 5.805, 5.73, 5.677, 5.553, 5.829, 5.489, 5.724, 5.793, 5.684, 5.606)
n <- length(reaction.times)
rt.data  <- list("reaction.times", "n")
rt.params <- c("theta", "rho")
rt.inits <- function(){
list("theta"=c(6), "rho"=c(25))
}
# Fit the JAGS model
# Make sure working directory is set to location of file "reaction.time.model.jags"
reaction.times.fit <- jags(data=rt.data, inits=rt.inits,
rt.params, n.chains=2, n.iter=9000, n.burnin=1000,
model.file="reaction.time.model.jags")
# Make sure working directory is set to location of file "reaction.time.model.jags"
reaction.times.fit <- jags(data=rt.data, inits=rt.inits,
rt.params, n.chains=2, n.iter=9000, n.burnin=1000,
model.file="reaction.time.model.jags")
summary(reaction.times.fit)
# Process output with coda package
reaction.times.fit.mcmc<-as.mcmc(reaction.times.fit) # convert to R MCMC object
summary(reaction.times.fit.mcmc)    # Summary table of MCMC outputs
plot(reaction.times.fit.mcmc)       # Plots of MCMC results
plot(reaction.times.fit)       # Plots of MCMC results
# Fit the JAGS model
# Make sure working directory is set to location of file "reaction.time.model.jags"
reaction.times.fit <- jags(data=rt.data, inits=rt.inits,
rt.params, n.chains=4, n.iter=9000, n.burnin=1000,
model.file="reaction.time.model.jags")
# Process output with coda package
reaction.times.fit.mcmc<-as.mcmc(reaction.times.fit) # convert to R MCMC object
summary(reaction.times.fit.mcmc)    # Summary table of MCMC outputs
plot(reaction.times.fit.mcmc)       # Plots of MCMC results
acfplot(reaction.times.fit.mcmc)
#Additional plots
xyplot(reaction.times.fit.mcmc)      # trace plots in lattice package
densityplot(reaction.times.fit.mcmc) # density plots in lattice package
#Diagnostics
superdiag(reaction.times.fit.mcmc, burnin=10)
summary(reaction.times.fit.mcmc)    # Summary table of MCMC outputs
# The data
wolf.surface=c(3.74, 4.61, 4.00, 4.67, 4.87, 5.12, 4.52, 5.29, 5.74, 5.48)
wolf.bottom=c(5.44, 6.88, 5.37, 5.44, 5.03, 6.48, 3.89, 5.85, 6.85, 7.16)
plot(wolf.surface,wolf.bottom)
lm(wolf.surface ~ wolf.bottom)
print(lm(wolf.surface ~ wolf.bottom))
summary(lm(wolf.surface ~ wolf.bottom))
cor(wolf.surface,wolf.bottom)
# Reaction time example from Unit 5 and 6
# Log reaction time data (log reaction times) for first non-schizophrenic subject
reaction.times=c(5.743, 5.606, 5.858, 5.656, 5.591, 5.793, 5.697, 5.875, 5.677, 5.73,
5.69, 5.919, 5.981, 5.996, 5.635, 5.799, 5.537, 5.642, 5.858, 5.793,
5.805, 5.73, 5.677, 5.553, 5.829, 5.489, 5.724, 5.793, 5.684, 5.606)
require(coda)   # load the coda package - Output Analysis and Diagnostics for MCMC
x = reaction.times
xbar = mean(x)
n = length(x)
#####
# First consider conjugate model of Unit 5
#   Assume non-informative prior distribution
#   Normal-Gamma with mu0=0, k0=0, alpha0=-1/2, beta0=infinity
#   Posterior hyperparameters mu1, k1, alpha1, beta1
mu0=0
k0=0
alpha0=-0.5
beta0=Inf
mu1 <- (mu0*k0+xbar*n)/(k0+n)
k1 <- k0+n
alpha1 <- alpha0 + n/2
beta1 <- 1/(1/beta0 + 0.5*sum((x-xbar)^2))
spread1 <- sqrt(1/(k1*alpha1*beta1))
thetaVals <- 5.64+(0:100)/500
stdVals <- (thetaVals - mu1)/spread1
thetaMargDens <- dt(stdVals,df=2*alpha1)/spread1
normDens <- dnorm(thetaVals,mu1,spread1)
dens <- cbind(thetaMargDens,normDens)
matplot(thetaVals,dens,type=c("l","l"),col=c("red","blue"),xlab="Theta",ylab="Probability Density")
legend(5.76,15,c("Unknown SD (t)","Known SD (Normal)"),col=c("red","blue"),lty=c(1,2))
# Direct Monte Carlo
# Set simulation sample size
numSim <- 10000
# Simulate directly from the posterior distribution
rhoDirect <- rgamma(numSim,shape=alpha1,scale=beta1)
sigmaDirect <- 1/sqrt(rhoDirect)
thetaDirect <- rnorm(numSim,mean=mu1,sd=sigmaDirect/sqrt(k1))
####
# Now use Gibbs sampling for semi-conjugate distribution (equations Unit 6 p.12)
thetaGibbs<-xbar     #Initial guess for mean
sigmaGibbs<-sd(x)    #Initial guess for stdev
rhoGibbs<-1/sigmaGibbs[1]^2  # Initial guess for precision
for (k in 2:numSim) {
thetaGibbs[k]<-  # note posterior mean is mu1 because k is zero
rnorm(1,mean=mu1,sd=sigmaGibbs[k-1]/sqrt(k1))
alphaG<-alpha1    # This is unncecessary because alpha1 does not change
betaG<-1/(0.5*sum((x-thetaGibbs[k])^2))
rhoGibbs[k]<-rgamma(1,shape=alphaG,scale=betaG)
sigmaGibbs[k]<-1/sqrt(rhoGibbs[k])
}
#Plot theoretical and Monte Carlo density functions
plot(density(thetaDirect),col="darkgreen",lty=2,main="",xlab="Theta")
densityGibbs<-density(thetaGibbs)
lines(densityGibbs$x,densityGibbs$y,col="blue",lty=3)
lines(thetaVals,thetaMargDens,col="red")
legend(5.76,15,c("Direct MC KD","Gibbs KD","Theoretical t"),col=c("darkgreen","blue","red"),lty=c(2,3,1))
#Plot theoretical and Monte Carlo density functions
plot(density(sigmaDirect),col="darkgreen",lty=2,main="",xlab="Sigma")
densityGibbsS<-density(sigmaGibbs)
lines(densityGibbsS$x,densityGibbsS$y,col="blue",lty=3)
legend(.2,20,c("Direct MC KD","Gibbs KD"),col=c("darkgreen","blue"),lty=c(2,3))
10000-902
902/10000
9098/10000
1/sqrt(c(-3.88, 0.245))
# Wolf River Analysis for Homework 6
# The data
wolf.surface=c(3.74, 4.61, 4.00, 4.67, 4.87, 5.12, 4.52, 5.29, 5.74, 5.48)
wolf.bottom=c(5.44, 6.88, 5.37, 5.44, 5.03, 6.48, 3.89, 5.85, 6.85, 7.16)
# Sufficient statistics for mean
xs=wolf.surface
sums=sum(wolf.surface)
xb=wolf.bottom
sumb=sum(wolf.bottom)
n <- length(xs)
##########  Problem 1  ############
# Conjugate unknown var - Separate priors for surface & bottom
# Prior hyperparameters
mus=0         # prior mean is 0
ks=0          # prior precision multiplier is 0
alphas=-0.5   # Shape of Jeffreys prior for precision
betas=Inf     # Infinite scale for Jeffreys prior
mub=0         # prior mean is 0
kb=0          # prior precision multiplier is 0
alphab=-0.5   # Shape of Jeffreys prior for precision
betab=Inf     # Infinite scale for Jeffreys prior
# Posterior hyperparameters
mus.star=(ks*mus+sum(xs))/(ks+n)
ks.star=ks+n
alphas.star=alphas+n/2
betas.star=( 1/betas + 0.5*sum((xs-mean(xs))^2) +
0.5*ks*n/(ks+n)*(mean(xs)-mus)^2 )^-1
mub.star=(kb*mub+sum(xb))/(kb+n)
kb.star=kb+n
alphab.star=alphab+n/2
betab.star=( 1/betab + 0.5*sum((xb-mean(xb))^2) +
0.5*kb*n/(kb+n)*(mean(xb)-mub)^2 )^-1
# 90% Posterior intervals on means and precisions
qgamma(c(0.05,0.95),shape=alphas.star,scale=betas.star)
qgamma(c(0.05,0.95),shape=alphab.star,scale=betab.star)
mus.star+qt(c(0.05,0.95),2*alphas.star)/sqrt(ks.star*alphas.star*betas.star)
mub.star+qt(c(0.05,0.95),2*alphab.star)/sqrt(kb.star*alphab.star*betab.star)
# Plots
rhogrid = seq(length=200, from=0.2, to=5.5)
plot(rhogrid, dgamma(rhogrid,shape=alphas.star,scale=betas.star),col="blue",
type="l",ylim=c(0,1),xlab="rho",ylab="Probability Density",
main="Marginal Density of Surface and Bottom Precision")
lines(rhogrid, dgamma(rhogrid,shape=alphab.star,scale=betab.star),col="red")
legend(3.5,0.85,c("Surface","Bottom"),col=c("blue","red"),lty=c(1,1))
thetagrid = seq(length=200, from=4.1, to=6.6)   # range for theta
spreads=1/sqrt(ks.star*alphas.star*betas.star)  # surface spread
dens=dt((thetagrid-mus.star)/spreads,alphas.star*2)/spreads
plot(thetagrid, dens, col="blue",
type="l",main="Marginal Density of Surface and Bottom Means",
xlab="theta",ylab="Probability Density")
spreadb=1/sqrt(kb.star*alphab.star*betab.star)  # bottom spread
dens=dt((thetagrid-mub.star)/spreadb,alphab.star*2)/spreadb
lines(thetagrid, dens, col="red")
legend(5.93,1.92,c("Surface","Bottom"),col=c("blue","red"),lty=c(1,1))
##########  Problem 2  ############
# Direct Monte Carlo
rhob=rgamma(10000,shape=alphab.star,scale=betab.star)
thetab=rnorm(10000,mub.star,1/sqrt(kb.star*rhob))
rhos=rgamma(10000,shape=alphas.star,scale=betas.star)
thetas=rnorm(10000,mus.star,1/sqrt(ks.star*rhos))
# Monte Carlo quantiles
quantile(rhos,c(0.05,0.95))
quantile(thetas,c(0.05,0.95))
quantile(rhob,c(0.05,0.95))
quantile(thetab,c(0.05,0.95))
##########  Problem 3  ############
# Plots and credible intervals generated above can be used
# to evaluate whether surface and bottom means and SDs differ
# Estimate probability that bottom concentration is larger
sum(thetab>thetas)/10000        # Estimated prob bottom mean is larger
sd(thetab>thetas)/sqrt(10000)   # Standard error of estimate
quantile(thetab-thetas, c(0.05,0.95))  # 90% credible interval
# Estimate probability that bottom standard deviation is better
sum(rhob>rhos)/10000        # Estimated prob bottom precision is larger
sd(rhob>rhos)/sqrt(10000)   # Standard error of estimate
quantile(rhob-rhos, c(0.05,0.95))  # 90% credible interval
##########  Problem 4  ############
# Evaluate normality - normal qq-plots
par(mfrow=c(1,2))   # 2 plots on a page
qqnorm(xs,main="Normal Q-Q Plot for Surface Data")
qqline(xs)
qqnorm(xb,main="Normal Q-Q Plot for Bottom Data")
qqline(xb)
par(mfrow=c(1,1))   # back to 1 plot on a page
qqnorm(c(xs-mean(xs),xb-mean(xb)),main="Normal Q-Q Plot for Combined Data")
qqline(c(xs-mean(xs),xb-mean(xb)))
# Evaluate normality - Shapiro Wilk Test
shapiro.test(xs)
shapiro.test(xb)
shapiro.test(c(xs-mean(xs),xb-mean(xb)))
# Estimate probability that bottom standard precision is larger
sum(rhob>rhos)/10000        # Estimated prob bottom precision is larger
sd(rhob>rhos)/sqrt(10000)   # Standard error of estimate
quantile(rhob-rhos, c(0.05,0.95))  # 90% credible interval
# Wolf River Analysis for Homework 6
# The data
wolf.surface=c(3.74, 4.61, 4.00, 4.67, 4.87, 5.12, 4.52, 5.29, 5.74, 5.48)
wolf.bottom=c(5.44, 6.88, 5.37, 5.44, 5.03, 6.48, 3.89, 5.85, 6.85, 7.16)
# Sufficient statistics for mean
xs=wolf.surface
sums=sum(wolf.surface)
xb=wolf.bottom
sumb=sum(wolf.bottom)
n <- length(xs)
##########  Problem 1  ############
# Conjugate unknown var - Separate priors for surface & bottom
# Prior hyperparameters
mus=0         # prior mean is 0
ks=0          # prior precision multiplier is 0
alphas=-0.5   # Shape of Jeffreys prior for precision
betas=Inf     # Infinite scale for Jeffreys prior
mub=0         # prior mean is 0
kb=0          # prior precision multiplier is 0
alphab=-0.5   # Shape of Jeffreys prior for precision
betab=Inf     # Infinite scale for Jeffreys prior
# Posterior hyperparameters
mus.star=(ks*mus+sum(xs))/(ks+n)
ks.star=ks+n
alphas.star=alphas+n/2
betas.star=( 1/betas + 0.5*sum((xs-mean(xs))^2) +
0.5*ks*n/(ks+n)*(mean(xs)-mus)^2 )^-1
mub.star=(kb*mub+sum(xb))/(kb+n)
kb.star=kb+n
alphab.star=alphab+n/2
betab.star=( 1/betab + 0.5*sum((xb-mean(xb))^2) +
0.5*kb*n/(kb+n)*(mean(xb)-mub)^2 )^-1
# 90% Posterior intervals on means and precisions
qgamma(c(0.05,0.95),shape=alphas.star,scale=betas.star)
qgamma(c(0.05,0.95),shape=alphab.star,scale=betab.star)
mus.star+qt(c(0.05,0.95),2*alphas.star)/sqrt(ks.star*alphas.star*betas.star)
mub.star+qt(c(0.05,0.95),2*alphab.star)/sqrt(kb.star*alphab.star*betab.star)
# Plots
rhogrid = seq(length=200, from=0.2, to=5.5)
plot(rhogrid, dgamma(rhogrid,shape=alphas.star,scale=betas.star),col="blue",
type="l",ylim=c(0,1),xlab="rho",ylab="Probability Density",
main="Marginal Density of Surface and Bottom Precision")
lines(rhogrid, dgamma(rhogrid,shape=alphab.star,scale=betab.star),col="red")
legend(3.5,0.85,c("Surface","Bottom"),col=c("blue","red"),lty=c(1,1))
thetagrid = seq(length=200, from=4.1, to=6.6)   # range for theta
spreads=1/sqrt(ks.star*alphas.star*betas.star)  # surface spread
dens=dt((thetagrid-mus.star)/spreads,alphas.star*2)/spreads
plot(thetagrid, dens, col="blue",
type="l",main="Marginal Density of Surface and Bottom Means",
xlab="theta",ylab="Probability Density")
spreadb=1/sqrt(kb.star*alphab.star*betab.star)  # bottom spread
dens=dt((thetagrid-mub.star)/spreadb,alphab.star*2)/spreadb
lines(thetagrid, dens, col="red")
legend(5.93,1.92,c("Surface","Bottom"),col=c("blue","red"),lty=c(1,1))
##########  Problem 2  ############
# Direct Monte Carlo
rhob=rgamma(10000,shape=alphab.star,scale=betab.star)
thetab=rnorm(10000,mub.star,1/sqrt(kb.star*rhob))
rhos=rgamma(10000,shape=alphas.star,scale=betas.star)
thetas=rnorm(10000,mus.star,1/sqrt(ks.star*rhos))
# Monte Carlo quantiles
quantile(rhos,c(0.05,0.95))
quantile(thetas,c(0.05,0.95))
quantile(rhob,c(0.05,0.95))
quantile(thetab,c(0.05,0.95))
##########  Problem 3  ############
# Plots and credible intervals generated above can be used
# to evaluate whether surface and bottom means and SDs differ
# Estimate probability that bottom concentration is larger
sum(thetab>thetas)/10000        # Estimated prob bottom mean is larger
sd(thetab>thetas)/sqrt(10000)   # Standard error of estimate
quantile(thetab-thetas, c(0.05,0.95))  # 90% credible interval
# Estimate probability that bottom  precision is smaller
sum(rhob>rhos)/10000        # Estimated prob bottom precision is larger
sd(rhob>rhos)/sqrt(10000)   # Standard error of estimate
quantile(rhob-rhos, c(0.05,0.95))  # 90% credible interval
# Estimate probability that bottom standard deviation is larger
sigmab=1/sqrt(rhob)         # bottom standard deviation
sigmas=1/sqrt(rhos)         # surfact standard deviation
sum(sigmab>sigmas)/10000    # Estimated prob bottom precision is larger
sd(sigmab>rsigmas)/sqrt(10000)   # Standard error of estimate
quantile(sigmab-sigmas, c(0.05,0.95))  # 90% credible interval
##########  Problem 4  ############
# Evaluate normality - normal qq-plots
par(mfrow=c(1,2))   # 2 plots on a page
qqnorm(xs,main="Normal Q-Q Plot for Surface Data")
qqline(xs)
qqnorm(xb,main="Normal Q-Q Plot for Bottom Data")
qqline(xb)
par(mfrow=c(1,1))   # back to 1 plot on a page
qqnorm(c(xs-mean(xs),xb-mean(xb)),main="Normal Q-Q Plot for Combined Data")
qqline(c(xs-mean(xs),xb-mean(xb)))
# Evaluate normality - Shapiro Wilk Test
shapiro.test(xs)
shapiro.test(xb)
shapiro.test(c(xs-mean(xs),xb-mean(xb)))
sum(sigmab>sigmas)/10000    # Estimated prob bottom precision is larger
sd(sigmab>rsigmas)/sqrt(10000)   # Standard error of estimate
sd(sigmab>sigmas)/sqrt(10000)   # Standard error of estimate
sum(sigmab>sigmas)/10000    # Estimated prob bottom precision is larger
quantile(sigmab-sigmas, c(0.05,0.95))  # 90% credible interval
1/sqrt(qgamma(c(0.05,0.95),shape=alphas.star,scale=betas.star))
2.5*.7
2.5*.3
#problem 1
# Prior hyperparameters
mu=0         # prior mean is 0
k=0          # prior precision multiplier is 0
alpha=-0.5   # Shape of prior for precision
beta=Inf     # Infinite scale
spread5=Inf  # Spread of predictive distribution for 1st 5 obs
surface = c(3.74,4.61,4,4.67,4.87,5.12,4.52,5.29,5.74,5.48)
bottom = c(5.44,6.88,5.37,5.44,5.03,6.48,3.89,5.85,6.85,7.16)
surface.mean = mean(surface)
bottom.mean = mean(bottom)
mu_s = ((k*mu)+(10*surface.mean))/10
k_s = k+10;
alpha_s = alpha +.5*10
beta_s = 1/(1/beta+.5* sum(surface-surface.mean))^2 + k*10*(surface.mean-mu)^2/(2*(k+10))
beta_s
betas.star=( 1/betas + 0.5*sum((xs-mean(xs))^2) +
0.5*ks*n/(ks+n)*(mean(xs)-mus)^2 )^-1
betas.star
.5* sum(surface-surface.mean))^2
0.5*sum((xs-mean(xs))^2)
2.5+1.5+1+.8
10-5.8
quantile(sigmab-sigmas, c(0.05,0.95))  # 90% credible interval
1/sqrt(qgamma(c(0.05,0.95),shape=alphas.star,scale=betas.star))
qgamma(c(0.05,0.95),shape=alphas.star,scale=betas.star)
10-.5-.8-.8-2.5
10-.8-1-.5
install.packages("R2jags")
install.packages("superdiag")
require(R2jags)    # running JAGS from r
require(superdiag) # mcmc diagnostics
require(coda)
require(lattice)   # for some of the plots
set.seed(12345)  # set seed for reproducibility
# The data
reaction.times=c(5.743, 5.606, 5.858, 5.656, 5.591, 5.793, 5.697, 5.875, 5.677, 5.73, 5.69, 5.919, 5.981, 5.996, 5.635, 5.799, 5.537, 5.642, 5.858, 5.793, 5.805, 5.73, 5.677, 5.553, 5.829, 5.489, 5.724, 5.793, 5.684, 5.606)
n <- length(reaction.times)
rt.data  <- list("reaction.times", "n")
rt.params <- c("theta", "rho")
rt.inits <- function(){
list("theta"=c(6), "rho"=c(25))
}
# Fit the JAGS model
# Make sure working directory is set to location of file "reaction.time.model.jags"
reaction.times.fit <- jags(data=rt.data, inits=rt.inits,
rt.params, n.chains=4, n.iter=9000, n.burnin=1000,
model.file="reaction.time.model.jags")
# Process output with coda package
reaction.times.fit.mcmc<-as.mcmc(reaction.times.fit) # convert to R MCMC object
# Note: default thinning gave a thinning interval of 8
summary(reaction.times.fit.mcmc)    # Summary table of MCMC outputs
plot(reaction.times.fit.mcmc)       # Plots of MCMC results
acfplot(reaction.times.fit.mcmc)
#Additional plots
xyplot(reaction.times.fit.mcmc)      # trace plots in lattice package
densityplot(reaction.times.fit.mcmc) # density plots in lattice package
#Diagnostics
superdiag(reaction.times.fit.mcmc, burnin=10)
