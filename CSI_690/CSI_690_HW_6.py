# -*- coding: utf-8 -*-
"""
Created on Sun Oct 14 13:08:41 2018

@author: jmcle
"""


x_1=0
y_1=0
x_2=1.3
y_2=0
x_3=0
y_3=1.3

n=1

r_12_n = (x_1-x_2)**n + (y_1-y_2)**n
r_13_n = (x_1-x_3)**n + (y_1-y_3)**n
r_23_n = (x_2-x_3)**n + (y_2-y_3)**n

print(r_12_n,r_13_n,r_23_n)

#%%


#dfx2=4*(((-12*(x_1-x_2 )**(-13))-(-6*(x_1-x_2 )**(-7)))+(((-12*(x_2-x_3 ))**(-13))-(-6*(x_2-x_3 )**(-7) )))
#dfx3=4*(((-12*(x_1-x_3 )**(-13))-(-6*(x_1-x_3 )**(-7)))+(((-12*(x_2-x_3 ))**(-13))-(-6*(x_2-x_3 )**(-7) )))
dfx3=4*(0+(((-12*(x_2-x_3 ))**(-13))-(-6*(x_2-x_3 )**(-7) )))
#dfy2
#dfy3

def calc_dfx2():
    if x_1 == x_2 and x_2 == x_3:
        dfx2 = 0
    elif x_1==x_2:
        dfx2=4*((((-12*(x_2-x_3 ))**(-13))-(-6*(x_2-x_3 )**(-7) )))
    elif x_2==x_3:
        dfx2=4*(((-12*(x_1-x_2 )**(-13))-(-6*(x_1-x_2 )**(-7))))
    else:
        dfx2=4*(((-12*(x_1-x_2 )**(-13))-(-6*(x_1-x_2 )**(-7)))+(((-12*(x_2-x_3 ))**(-13))-(-6*(x_2-x_3 )**(-7) )))
    return(dfx2)

def calc_dfx3():
    if x_1 == x_3 and x_2 == x_3:
        dfx3 = 0
    elif x_1==x_3:
        dfx3=4*((((-12*(x_2-x_3 ))**(-13))-(-6*(x_2-x_3 )**(-7) )))
    elif x_2==x_3:
        dfx3=4*(((-12*(x_1-x_3 )**(-13))-(-6*(x_1-x_3 )**(-7))))
    else:
        dfx3=4*(((-12*(x_1-x_3 )**(-13))-(-6*(x_1-x_3 )**(-7)))+(((-12*(x_2-x_3 ))**(-13))-(-6*(x_2-x_3 )**(-7) )))
    return(dfx3)

def calc_dfy2():
    if y_1 == y_2 and y_2 == y_3:
        dfy2 = 0
    elif y_1==y_2:
        dfy2=4*((((-12*(y_2-y_3 ))**(-13))-(-6*(y_2-y_3 )**(-7) )))
    elif y_2==y_3:
        dfy2=4*(((-12*(y_1-y_2 )**(-13))-(-6*(y_1-y_2 )**(-7))))
    else:
        dfy2=4*(((-12*(y_1-y_2 )**(-13))-(-6*(y_1-y_2 )**(-7)))+(((-12*(y_2-y_3 ))**(-13))-(-6*(y_2-y_3 )**(-7) )))
    return(dfy2)

def calc_dfy3():
    if y_1 == y_3 and x_2 == y_3:
        dfy3 = 0
    elif y_1==y_3:
        dfy3=4*((((-12*(y_2-y_3 ))**(-13))-(-6*(y_2-y_3 )**(-7) )))
    elif y_2==y_3:
        dfy3=4*(((-12*(y_1-y_3 )**(-13))-(-6*(y_1-y_3 )**(-7))))
    else:
        dfy3=4*(((-12*(y_1-y_3 )**(-13))-(-6*(y_1-y_3 )**(-7)))+(((-12*(y_2-y_3 ))**(-13))-(-6*(y_2-y_3 )**(-7) )))
    return(dfy3)

dfx2=calc_dfx2()
dfx3=calc_dfx3()
dfy2=calc_dfy2()
dfy3=calc_dfy3()
print(dfx2,dfx3,dfy2,dfy3)

#%%
import numpy as np

b = np.array([1.5848116585104552,3.8247915883015984,-3.8247915883015984, -6.0647715180927415])
a = np.matrix([[-25.3935532528514,-10.5030927066768,10.5030927066768,6.62076140915928],
              [-10.5030927066768,-4.34421111951552,4.34421111951552,2.7384301116418],
              [10.5030927066768,4.34421111951552,-4.34421111951552,-2.7384301116418],
              [6.62076140915928,2.7384301116418,-2.7384301116418,-1.72620511987981]])
#s = np.linalg.solve(a,b)
np.linalg.det(a)

at = np.matrix.transpose(a)

ata = np.dot(a,at)
print(ata)
print()

atb = np.dot(at,b)
atb = np.matrix.transpose(atb)
print(atb)
print()

s = np.linalg.solve(ata,atb)
print(s)
print()

#%%
import sympy
